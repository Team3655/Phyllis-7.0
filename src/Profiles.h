///////////////////////////////////////////////////////////////////////////////
//
// Profiles.h
//
//  Created on: Feb 25, 2017
//      Author: Silas A.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef PROFILES_H
#define PROFILES_H

typedef int BOOL;

// Wrapper structure for profile
struct Profile
{
	BOOL turn;
	int size;
	const double (*profile)[3];
	bool split;

	Profile(BOOL turn, int size, const double (*profile)[3], bool split) :
		turn(turn), size(size), profile(profile), split(split) {  }

	Profile() {  }
 };

// Function for creating a profile struct
// It creates profile from start/end points
static Profile* create_profile(Profile* p, BOOL turn, int size, const double (*profile)[3], int start, int end, bool split)
{
	int newSize = end - start;
	double (*pr)[3] = new double[newSize][3];
	for (int i = start; i < newSize; i++)
	{
		pr[0][i] = profile[0][i];
		pr[1][i] = profile[1][i];
		pr[2][i] = profile[2][i];
	 }
	p->turn = turn;
	p->size = newSize;
	p->profile = pr;
	p->split = split;
	return p;
 }

// [position] [velocity] [duration(ms)]
// Profiles for driving to the peg
const double MpPrePeg[][3] =
{
	{   0.0, 0.0, 20  }
 };
const int MpPrePegSize = 1;

// Profiles for driving from the peg
const double MpPostPeg[][3] =
{
	{   0.0, 0.0, 20  }
 };
const int MpPostPegSize = 1;

// Test
const double MpTest[][3] =
{
	{ 0, 0, 20 },
	{ 0.000181818181818182, 1.090909091, 20 },
	{ 0.000818181818181818, 2.727272727, 20 },
	{ 0.00209090909090909, 4.909090909, 20 },
	{ 0.00418181818181818, 7.636363636, 20 },
	{ 0.00727272727272727, 10.90909091, 20 },
	{ 0.0115454545454545, 14.72727273, 20 },
	{ 0.0171818181818182, 19.09090909, 20 },
	{ 0.0243636363636364, 24, 20 },
	{ 0.0332727272727273, 29.45454545, 20 },
	{ 0.0440909090909091, 35.45454545, 20 },
	{ 0.0567272727272727, 40.36363636, 20 },
	{ 0.0709090909090909, 44.72727273, 20 },
	{ 0.0864545454545455, 48.54545455, 20 },
	{ 0.103181818181818, 51.81818182, 20 },
	{ 0.120909090909091, 54.54545455, 20 },
	{ 0.139454545454545, 56.72727273, 20 },
	{ 0.158636363636364, 58.36363636, 20 },
	{ 0.178272727272727, 59.45454545, 20 },
	{ 0.198181818181818, 60, 20 },
	{ 0.218181818181818, 60, 20 },
	{ 0.238181818181818, 60, 20 },
	{ 0.258181818181818, 60, 20 },
	{ 0.278181818181818, 60, 20 },
	{ 0.298181818181818, 60, 20 },
	{ 0.318181818181818, 60, 20 },
	{ 0.338181818181818, 60, 20 },
	{ 0.358181818181818, 60, 20 },
	{ 0.378181818181818, 60, 20 },
	{ 0.398181818181818, 60, 20 },
	{ 0.418181818181818, 60, 20 },
	{ 0.438181818181818, 60, 20 },
	{ 0.458181818181818, 60, 20 },
	{ 0.478181818181818, 60, 20 },
	{ 0.498181818181818, 60, 20 },
	{ 0.518181818181818, 60, 20 },
	{ 0.538181818181818, 60, 20 },
	{ 0.558181818181818, 60, 20 },
	{ 0.578181818181818, 60, 20 },
	{ 0.598181818181818, 60, 20 },
	{ 0.618181818181818, 60, 20 },
	{ 0.638181818181819, 60, 20 },
	{ 0.658181818181819, 60, 20 },
	{ 0.678181818181819, 60, 20 },
	{ 0.698181818181819, 60, 20 },
	{ 0.718181818181819, 60, 20 },
	{ 0.738181818181819, 60, 20 },
	{ 0.758181818181819, 60, 20 },
	{ 0.778181818181819, 60, 20 },
	{ 0.798181818181819, 60, 20 },
	{ 0.818181818181819, 60, 20 },
	{ 0.838000000000001, 58.90909091, 20 },
	{ 0.857363636363637, 57.27272727, 20 },
	{ 0.87609090909091, 55.09090909, 20 },
	{ 0.894, 52.36363636, 20 },
	{ 0.910909090909091, 49.09090909, 20 },
	{ 0.926636363636364, 45.27272727, 20 },
	{ 0.941, 40.90909091, 20 },
	{ 0.953818181818182, 36, 20 },
	{ 0.964909090909091, 30.54545455, 20 },
	{ 0.974090909090909, 24.54545455, 20 },
	{ 0.981454545454546, 19.63636364, 20 },
	{ 0.987272727272728, 15.27272727, 20 },
	{ 0.991727272727273, 11.45454545, 20 },
	{ 0.995, 8.181818182, 20 },
	{ 0.997272727272728, 5.454545455, 20 },
	{ 0.998727272727273, 3.272727273, 20 },
	{ 0.999545454545455, 1.636363636, 20 },
	{ 0.999909090909091, 0.545454545, 20 },
	{ 1, 7.5697E-16, 20 },
	{ 1, 0, 20 }
 };
const int MpTestSize = 71;

#endif // PROFILES_H
